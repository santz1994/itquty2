<?php

namespace App\Services;

use App\Asset;
use App\AssetRequest;
use App\User;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Log;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Illuminate\Support\Facades\Storage;
use Exception;

class AssetService
{
    /**
     * Create new asset with QR code generation
     */
    public function createAsset(array $data)
    {
        return DB::transaction(function () use ($data) {
            // Create asset - QR code will be auto-generated by the model
            $asset = Asset::create($data);
            
            // Generate QR code file if requested
            if (isset($data['generate_qr']) && $data['generate_qr']) {
                $this->generateQRCode($asset);
            }
            
            return $asset;
        });
    }

    /**
     * Update existing asset
     */
    public function updateAsset(Asset $asset, array $data)
    {
        return DB::transaction(function () use ($asset, $data) {
            $asset->update($data);
            
            // Regenerate QR code if needed
            if (isset($data['regenerate_qr']) && $data['regenerate_qr']) {
                $this->generateQRCode($asset);
            }
            
            return $asset;
        });
    }

    /**
     * Generate QR code for asset and save to storage
     */
    public function generateQRCode(Asset $asset)
    {
        $qrCodePath = 'qr-codes/assets/';
        
        // Ensure directory exists
        if (!Storage::exists($qrCodePath)) {
            Storage::makeDirectory($qrCodePath);
        }

        $filename = 'asset-' . $asset->id . '-' . $asset->qr_code . '.svg';
        $filePath = $qrCodePath . $filename;
        
        // Generate QR code content
        $qrContent = route('assets.qr', $asset->qr_code);
        
        // Generate QR code as SVG
        $qrCode = QrCode::format('svg')
                       ->size(200)
                       ->margin(1)
                       ->generate($qrContent);

        // Save to storage
        Storage::put($filePath, $qrCode);
        
        // Update asset with QR code path
        $asset->update(['qr_code_path' => $filePath]);

        return $filePath;
    }

    /**
     * Get asset by QR code
     */
    public function getAssetByQRCode($qrCode)
    {
        return Asset::where('qr_code', $qrCode)
                   ->with(['model', 'status', 'assignedTo', 'tickets'])
                   ->first();
    }

    /**
     * Assign asset to user
     */
    public function assignAsset(Asset $asset, $userId)
    {
        return DB::transaction(function () use ($asset, $userId) {
            $asset->update([
                'assigned_to' => $userId,
                'status_id' => 1 // In Use status
            ]);
            
            // Log the assignment (if Movement model exists)
            // Movement::create([
            //     'asset_id' => $asset->id,
            //     'from_user' => null,
            //     'to_user' => $userId,
            //     'moved_by' => auth()->id(),
            //     'notes' => 'Asset assigned to user'
            // ]);
            
            return $asset;
        });
    }

    /**
     * Unassign asset from user
     */
    public function unassignAsset(Asset $asset)
    {
        return DB::transaction(function () use ($asset) {
            $previousUser = $asset->assigned_to;
            
            $asset->update([
                'assigned_to' => null,
                'status_id' => 2 // In Stock status
            ]);
            
            // Log the unassignment
            // Movement::create([
            //     'asset_id' => $asset->id,
            //     'from_user' => $previousUser,
            //     'to_user' => null,
            //     'moved_by' => auth()->id(),
            //     'notes' => 'Asset returned/unassigned'
            // ]);
            
            return $asset;
        });
    }

    /**
     * Create asset request
     */
    public function createAssetRequest(array $data)
    {
        return AssetRequest::create($data);
    }

    /**
     * Approve asset request
     */
    public function approveAssetRequest(AssetRequest $request, $approverId, $notes = null)
    {
        DB::transaction(function () use ($request, $approverId, $notes) {
            $request->approve($approverId, $notes);
            
            // Try to auto-fulfill if available asset exists
            $availableAsset = Asset::where('model_id', $request->asset_type_id ?? 0)
                                  ->inStock()
                                  ->whereNull('assigned_to')
                                  ->first();

            if ($availableAsset) {
                $this->fulfillAssetRequest($request, $availableAsset->id);
            }
        });

        return $request;
    }

    /**
     * Fulfill asset request
     */
    public function fulfillAssetRequest(AssetRequest $request, $assetId)
    {
        $asset = Asset::find($assetId);
        
        if (!$asset) {
            throw new Exception('Asset not found');
        }

        return DB::transaction(function () use ($request, $asset) {
            $request->fulfill($asset->id);
            $this->assignAsset($asset, $request->requested_by);

            return $request;
        });
    }

    /**
     * Get asset statistics
     */
    public function getAssetStatistics()
    {
        return [
            'total' => Asset::count(),
            'in_use' => Asset::inUse()->count(),
            'in_stock' => Asset::inStock()->count(),
            'in_repair' => Asset::inRepair()->count(),
            'disposed' => Asset::disposed()->count(),
            'with_qr_codes' => Asset::whereNotNull('qr_code')->count(),
            'lemon_assets' => Asset::whereHas('tickets', function($q) {
                $q->where('created_at', '>=', now()->subMonths(6));
            }, '>=', 3)->count()
        ];
    }

    /**
     * Get assets by location
     */
    public function getAssetsByLocation()
    {
        return Asset::select('divisions.name as division_name', DB::raw('count(*) as count'))
                   ->join('divisions', 'assets.division_id', '=', 'divisions.id')
                   ->groupBy('divisions.name')
                   ->orderBy('count', 'desc')
                   ->get();
    }

    /**
     * Get warranty expiring assets
     */
    public function getWarrantyExpiringAssets($days = 30)
    {
        return Asset::whereNotNull('purchase_date')
                   ->whereNotNull('warranty_months')
                   ->whereRaw('DATE_ADD(purchase_date, INTERVAL warranty_months MONTH) BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL ? DAY)', [$days])
                   ->with(['model', 'assignedTo', 'division'])
                   ->get();
    }

    /**
     * Get lemon assets (frequently breaking assets)
     */
    public function getLemonAssets($months = 6, $minTickets = 3)
    {
        return Asset::whereHas('tickets', function($q) use ($months) {
                    $q->where('created_at', '>=', now()->subMonths($months));
                }, '>=', $minTickets)
                ->with(['model', 'assignedTo', 'tickets' => function($q) use ($months) {
                    $q->where('created_at', '>=', now()->subMonths($months))
                      ->orderBy('created_at', 'desc');
                }])
                ->get();
    }

    /**
     * Get asset analytics for dashboard
     */
    public function getAssetAnalytics($startDate, $endDate)
    {
        return [
            'new_assets' => Asset::whereBetween('created_at', [$startDate, $endDate])->count(),
            'assignments' => Asset::whereNotNull('assigned_to')
                                 ->whereBetween('updated_at', [$startDate, $endDate])
                                 ->count(),
            'repairs' => Asset::where('status_id', 3)
                             ->whereBetween('updated_at', [$startDate, $endDate])
                             ->count(),
            'disposals' => Asset::where('status_id', 4)
                              ->whereBetween('updated_at', [$startDate, $endDate])
                              ->count(),
        ];
    }

    /**
     * Search assets
     */
    public function searchAssets($query, $filters = [])
    {
        $assets = Asset::where(function($q) use ($query) {
            $q->where('asset_tag', 'LIKE', "%{$query}%")
              ->orWhere('serial_number', 'LIKE', "%{$query}%")
              ->orWhereHas('model', function($subQ) use ($query) {
                  $subQ->where('name', 'LIKE', "%{$query}%");
              });
        });

        // Apply filters
        if (isset($filters['status_id'])) {
            $assets->where('status_id', $filters['status_id']);
        }
        
        if (isset($filters['division_id'])) {
            $assets->where('division_id', $filters['division_id']);
        }
        
        if (isset($filters['assigned_to'])) {
            $assets->where('assigned_to', $filters['assigned_to']);
        }

        return $assets->with(['model', 'status', 'assignedTo', 'division'])->get();
    }
    
    /**
     * Send asset assignment notification
     */
    public function sendAssignmentNotification(Asset $asset, User $user)
    {
        try {
            // Use Mail facade or event/listener pattern
            Mail::send('emails.asset-assignment', [
                'asset' => $asset,
                'user' => $user
            ], function ($m) use ($user, $asset) {
                $m->to($user->email, $user->name)
                  ->subject('Asset Assigned: ' . $asset->model->name);
            });
            
            return true;
        } catch (\Exception $e) {
            Log::error('Failed to send asset assignment email: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Send maintenance reminder notification
     */
    public function sendMaintenanceReminder(Asset $asset)
    {
        try {
            if (!$asset->assignedTo) {
                return false;
            }
            
            Mail::send('emails.asset-maintenance', [
                'asset' => $asset
            ], function ($m) use ($asset) {
                $m->to($asset->assignedTo->email, $asset->assignedTo->name)
                  ->subject('Maintenance Reminder: ' . $asset->model->name);
            });
            
            return true;
        } catch (\Exception $e) {
            Log::error('Failed to send maintenance reminder email: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Bulk operations for assets
     */
    public function bulkUpdateAssets(array $assetIds, array $updateData)
    {
        return Asset::whereIn('id', $assetIds)->update($updateData);
    }
    
    /**
     * Get assets that need maintenance
     */
    public function getAssetsNeedingMaintenance()
    {
        return Asset::where('next_maintenance_date', '<=', now())
                   ->where('status_id', '!=', 4) // Not disposed
                   ->with(['model', 'assignedTo', 'status'])
                   ->get();
    }
}